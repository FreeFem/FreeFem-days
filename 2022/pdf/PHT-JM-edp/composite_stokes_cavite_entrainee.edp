// composite stokes cavité entrainé
macro grad(u) [dx(u),dy(u)]//
macro Grad(u1,u2) [ grad(u1), grad(u2)]//
macro div(u1,u2) (dx(u1)+dy(u2))//

real ly=3;
real xInflow=-3;
real xOutflow=3;

//func inflow = sin(pi*y/ly);
border a0(t=ly,-ly){x=xInflow; y=t; label=1;}       // left
border a1(t= xInflow, xOutflow){x=t; y=-ly; label=2;} // bottom
border a4(t=-ly,ly){x=xOutflow; y=t; label=3;}       // right
border a5(t=1, 0){x=xInflow+(xOutflow-xInflow)*t; y=ly; label=4;} //top

border b(t=0, 2*pi){x=0.3+0.3*cos(t); y=1+0.3*sin(t); label=5;} 

int nn= 4;
int nny= (2*ly)*nn;
int nnx= (xOutflow-xInflow)*nn;
int nncircle = 4*nn*(2.0*pi*0.3);


mesh Th=buildmesh( a0(nny) + a1(nnx) + a4(nny) + a5(nnx) + b(-nncircle) );

// version Taylor Hood element for pressure and velocity
mesh ThU=Th; 
mesh ThP=Th;

plot(ThP,wait=1,cmm="pressure mesh");
plot(ThU,wait=1,cmm="velocity mesh");

fespace Uh(ThU,[P2,P2]);
fespace Ph(ThP,P1);

/*
// version different mesh for pressure and velocity
mesh ThU=trunc(Th,1,split=2);
mesh ThP=Th;

plot(ThP,wait=1,cmm="pressure mesh");
plot(ThU,wait=1,cmm="velocity mesh");

fespace Uh(ThU,[P1,P1]);
fespace Ph(ThP,P1);
*/

fespace Vh(<Uh,Ph>);

Uh [u1,u2];
Ph p;

varf Stokes ( [u1,u2,p], [v1,v2,q])
= int2d(ThU)( (Grad(u1,u2):Grad(v1,v2)) ) + int2d(ThU)( - div(u1,u2)*q - div(v1,v2)*p ) + int2d(ThP)(-1e-10*p*q) 
+ on(1,2,3,5,u1=0,u2=0) + on(4,u1=1,u2=0);

//varf rhsStokes ( [u1,u2,p], [v1,v2,q]) = on(1,2,3,5,u1=0,u2=0) + on(4,u1=1,u2=0);

matrix A = Stokes(Vh,Vh,solver=sparsesolver);
real[int] b1 = Stokes(0,Vh);

real[int] sol = A^(-1)*b1;

[u1[],p[]] = sol; // dispatch the solution

plot( u1, cmm="u1", fill=1 );
plot( u2, cmm ="u2", fill=1);
plot( p, cmm ="p" ,fill=1 );
plot( [u1,u2],  cmm="vector", fill=1);

// streamlines
fespace Uh1(ThU,P1);
Uh1 psi, phi;
solve streamlines (psi, phi) = int2d(ThU)(
          dx(psi)*dx(phi)
        + dy(psi)*dy(phi)
    )
    + int2d(ThU)(
        - phi*(dy(u1) - dx(u2))
    )
    + on(1, 2, 3, 4,5, psi=0)
    ;
plot( psi,  cmm="vector", nbiso=29);