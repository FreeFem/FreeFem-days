mesh Th=square(100,100);
real a =1, b =2, c= -1; 
func g = cos(x*pi)*cos(y*pi); //==a*x+b*y +c;
fespace Vh(Th,P1);

macro grad(u) [dx(u),dy(u)] // eom 

Vh u, v, w;

u = g ;//+ 16*x*y*(1-x)*(1-y);
func J = int2d(Th) ( sqrt(1 + grad(u)'*grad(u))) ;
plot( u, cmm = " J = "  + J ); 


real rho = 2;
real err=0; 
int i;

problem  Newton(w,v) = int2d(Th)( 
grad(w)'*grad(v)/sqrt(1+grad(u)'*grad(u) )
-  (grad(v)'*grad(u))*(grad(u)'*grad(w) )/(1+grad(u)'*grad(u) )^(3./2.) 
)
-  int2d(Th) ( grad(u)'*grad(v)/sqrt(1 + grad(u)'*grad(u)))
+ on(1,2,3,4, w=0) ;

for(  i=0; i < 1000; ++i)
{
    //    du[] = dJ(0,Vh); 
        Newton; 
        err = w[].linfty ; 
        u = u - w; 
        cout << i << " err " << err << " J = " << J << endl; 
        plot( u, dim=3, fill=1,cmm = " J = "  + J ); 
        if(err < 1e-6) break;         
}
