{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red69\green60\blue204;\red9\green80\blue208;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c84706;\cssrgb\c34510\c33725\c83922;\cssrgb\c0\c41176\c85098;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww12800\viewh17740\viewkind1
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
Adding a new finite element to FreeFem++: the example of edge elements\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \

\f1\fs28 \cf2 \kerning1\expnd0\expndtw0 Marcella Bonazzoli  
\f0\fs24 \cf3 \expnd0\expndtw0\kerning0
 {\field{\*\fldinst{HYPERLINK "mailto:bonazzoli@ljll.math.upmc.fr"}}{\fldrslt \cf4 \ul \ulc4 bonazzoli@ljll.math.upmc.fr}}\cf0 \
Post doc. Inria/LJLL\
\
If a finite element is not available yet in FreeFem++, the user can add a new finite element by writing a C++ plugin that defines two main ingredients: the basis functions (and their derivatives), and an interpolation operator. In FreeFem++ the basis functions (and in some cases the coefficients of the interpolation operator) are constructed locally, i.e. in each simplex of the mesh, without the need of a transformation from the reference simplex. The interpolation operator requires degrees of freedom and basis functions in duality. \
Here we focus on the example of N\'e9d\'e9lec edge finite elements, which are suited for the approximation of the electric field in Maxwell\'92s equations}