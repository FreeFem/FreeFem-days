
border fr1(t=0,1){x=t; y=0; label=1;}
border fr2(t=0,1){x=1; y=t; label=1;}
border fr3(t=1,0){x=t; y=1; label=2;}// top
border fr4(t=1,0){x=0; y=t; label=1;}

int nn=15;
int nnn=14;// ok avec 15  
real eps=1e-6;// ok 1e-3
mesh Th=buildmesh(fr1(nn)+fr2(nn)+fr3(nn)+fr4(nnn));

plot(Th,wait=1);


 real T=2,t=0; 
 real dt = 0.1;// CFL = 1 
 cout << " dt = " << dt <<endl;
real alpha=0,epspq=1e-10;
real nu=1;

fespace Mh(Th,[P1]);
fespace Xh(Th,[P2]);
fespace Wh(Th,[P1dc]);
macro grad(u) [dx(u),dy(u)] //
macro div(u1,u2) (dx(u1)+dy(u2)) //

 
 varf von1([u1,u2,p],[v1,v2,q]) =  on(1,u1=0,u2=0) + on(2,u1=1,u2=0);

 varf vA(p,q) =int2d(Th)((grad( p ) '*grad(q)) )  ;
 varf vM(p,q) =int2d(Th,qft=qf2pT)(  p*q );

 varf vu([u1],[v1]) = int2d(Th)(alpha*(u1*v1)+nu*(grad(u1)'*grad(v1) )) 
                       + on(1,2,u1=0) ;
 varf vu1([p],[v1]) = int2d(Th)(p*dx(v1)) ;
 varf vu2([p],[v1]) = int2d(Th)(p*dy(v1)) ;
   

 matrix pAM=vM(Mh,Mh,solver=UMFPACK); 
 matrix pAA=vA(Mh,Mh,solver=UMFPACK); 
 matrix AU=vu(Xh,Xh,solver=UMFPACK); 
 matrix B1=vu1(Mh,Xh);
 matrix B2=vu2(Mh,Xh);
 Xh u1,u2;
 Mh p;
varf vonu1([u1],[v1]) =  on(1,u1=0) + on(2,u1=1);
varf vonu2([u1],[v1]) =  on(1,u1=0) + on(3,u1=0);


real[int] brhs1 = vonu1(0,Xh);
real[int] brhs2 = vonu2(0,Xh);
 
varf  vrhs1(uu,vv)  = int2d(Th) (convect([u1,u2],-dt,u1)*vv*alpha)+vonu1 ;
varf  vrhs2(v2,v1)  = int2d(Th) (convect([u1,u2],-dt,u2)*v1*alpha)+vonu2;


func  real[int]   JUzawa(real[int] & pp) 
{
	real[int] b1=brhs1; b1 += B1*pp;
	real[int] b2=brhs2; b2 += B2*pp;
	u1[] = AU^-1 * b1;
	u2[] = AU^-1 * b2;
	pp  = B1'*u1[];
	pp += B2'*u2[];
	pp = -pp; 
	return pp; 
}

func  real[int]   Precon(real[int] & p)
 {  
    real[int] pa= pAA^-1*p;
    real[int] pm= pAM^-1*p;
    real[int] pp= alpha*pa+nu*pm;
 
  	return pp;
 }

 verbosity = 0; 
 p=0;

 
 int ndt = T/dt;
     brhs1 = vrhs1(0,Xh);
     brhs2 = vrhs2(0,Xh);
     int res=LinearCG(JUzawa,p[],precon=Precon,nbiter=100,verbosity=100,veps=eps); 
 
  plot([u1,u2],fill=1,wait=0, nbiso=40);
  cout << " u1 max " << u1[].linfty 
      << " u2 max " << u2[].linfty 
      << " p max = " << p[].max << endl; 
      
  cout << " Flux sortant = " << int1d(Th)( [N.x,N.y]'*[u1,u2]) <<endl;  
    
      assert(res==1);
 