// https://fr.wikipedia.org/wiki/Diffusivité_thermique
// http://www.goodfellow.com/F/Polyethylene-terephthalate.html
/* PET 
Coefficient de frottement	0,2-0,4		
Coefficient de Poisson	0,37-0,44(oriented)		
Dureté - Rockwell	M94-101		
Module de tension ( GPa )	2-4		
Résistance à la traction ( MPa )	80, film biax 190-260		
Résistance aux chocs - IZOD ( J m-1 )	13-35		

*/
// https://fr.wikipedia.org/wiki/Température_de_transition_vitreuse
// https://en.wikipedia.org/wiki/Backward_differentiation_formula
// https://fr.wikipedia.org/wiki/Matière_plastique


int wait=1;
int lpreform =1, laxe=2, lout=4,lfaceentre=5,lcold=6,lbouchon=7,l2ext=8,lfaceentrep=9;
{
real epaisSolide = 0.02; // 0.2 mnn 
real epaisMaillage = epaisSolide*2; // epaisseur  de calcul de la fonction distance 
// pour est sur de ne pas rate l'iso 
real hfine = epaisMaillage/10; // taille de maille dans la zone fine 
load "distance"
real epaisseur= 0.3;
real epaisseur0= 0.15;

real meshsize= epaisseur/10;
real meshsizef = meshsize/2;
real meshsizeg = meshsize*2;
real R00=0.2,R0=0.5,R1=R0+epaisseur,R2=2,RC=0.2,L0=0,L1=1,L2=10,Lt=9.9,Rt=R0/2;
real Lc=L2/3;

real[int] CX= [L2/4,2*L2/3,3*L2/3];
int[int] Lpreform=[lpreform,lbouchon];
func R0x = R0+  epaisseur0 +  (epaisseur-epaisseur0) * max(0.,  x/L1-4./5)*5. ; 
border bintd( t=L0,L2){ x= t; y= R0; label = lpreform;};
border bintc( t=0,pi/2){ x= L2+R0*cos(t); y= R0*sin(t); label = lpreform;}
border bextd1( t=L1,Lc){ x= t; y= R1; label = lpreform;};
border bextd2( t=Lc,L2){ x= t; y= R1; label = lpreform;};
border bexts( t=0,L1){ x= t; y= R0x+ 0.05*(1+(5*x/L1>4)*5)*sin(5*pi*x/L1)^2; label = lbouchon;};
border bextc( t=0,pi/2){ x= L2+R1*cos(t); y= R1*sin(t); label = lpreform;}

border btroud(t=0, Lt) { x=t; y=Rt; label= lcold; }
border btrouc (t=pi/2,0) {x= Lt+Rt*cos(t); y= Rt*sin(t); label= lcold; }

border boutc( t=0,pi/2){ x= L2+R2*cos(t); y= R2*sin(t); label = lout;}
border boutd2( t=L2,Lc){ x= t; y= R2; label = lout;}
border boutd1( t=Lc,L0){ x= t; y= R2; label = lout;}

border baxe1 (t=Lt+Rt,L2+R0) { x=t; y=0; label= laxe; }
border baxe2 (t=L2+R0,L2+R2) { x=t; y=0; label= laxe; }

border bvc (t=R1,R2) { x=Lc; y=t; label= l2ext; }

border bv0 (t=R0,Rt) { x=L0; y=t; label= lfaceentre; }
border bv1 (t=R1,R0) { x=L0; y=t; label= lfaceentrep; }
border bv2 (t=R2,R1) { x=L0; y=t; label= lfaceentre; }
real CY = (R1+R2)/2;
border holes(t=2*pi,0;i) { x= CX[i]+RC*cos(t); y= CY+RC*sin(t); label = lcold;}
int[int] Nh(3); Nh= RC*pi*2/meshsize;
int  Ntd= (Lt)/ meshsize; 
int  Ntc= pi*Rt/2/ meshsize; 
int  Na1= (L2+R0-Lt-Rt)/ meshsize; 
int  Na2= (R2-R0)/ meshsize; 
int  Nc= pi*R0/2/ meshsize; 
int  Nc2= pi*R2/2/ meshsize; 
int  Nd21= Lc/meshsize; 
int  Nd22= (L2-Lc)/meshsize; 
int  Nd2= (L2)/meshsize; 

int  Nd1= L1/meshsize; 
int Nvc = (R2-R1)/meshsize;
int  Ns= pi*L1/meshsize; 
real[int,int] BDF= [[ 1,-1,0,0,0],
                    [1.5,-2,0.5,0,0],
					[11./6., -3,3./2., -1./3.,0],
					[25./12,-48./12.,36./12.,-16./12.,3./12. ] ]; 
for(int i=0; i< BDF.n; i++)
{
cout << i << " sum BDF =" << BDF(i,:).sum << endl;
assert(abs(BDF(i,:).sum)< 1e-10); 
}
int nbrg =4;
func bord = baxe1(Na1)+ bintc(Nc) + bintd(Nd2)
 +bextc(Nc)+bextd1(Nd21-Nd1)+bextd2(Nd22)+bexts(Nd1*2)
+ boutd1(Nd21)+ boutd2(Nd22)+ boutc(Nc2) + baxe2(Na2)
+ btroud(Ntd)+ btrouc(Ntc)
+ bv0(R0/meshsize) + bv1((R1-R0)/meshsize) + bv2((R2-R1)/meshsize) 
+ bvc(Nvc)
+ holes(Nh);
plot(bord,ps="bord.eps"); 
	
varf von1(u,v)= on(Lpreform,u=1);
varf von1c(u,v)= on(Lpreform,lcold,u=1);
mesh Th=buildmesh(bord); 
{
	fespace Vh(Th,P1); 
   Vh dist,phi,hsize;
   phi[] = von1c(0,Vh,tgv=1);
   phi[] = phi[] ? 0: 1;
   hsize = 	abs(dist)<epaisMaillage ? meshsizef : meshsizeg;
   distance(Th,phi,dist[],distmax=epaisMaillage*2	);	
Th=adaptmesh(Th,hsize,IsMetric=1,nbvx=600000,ratio=1.2);
}
plot(Th,wait=wait);
real[int] YR=[R0/2,(R1+R0)/2,(R2+R1)/2,(R2+R1)/2];
real[int] XR=[0.1,0,1,0.1,L1+0.1];

int[int] ir(nbrg*2);
for(int i=0; i< nbrg;++i)
{
ir[2*i]= Th(XR[i],YR[i]).region;
ir[2*i+1]= i+1;
}
Th=change(Th,region=ir);
plot(Th,wait=wait);
fespace Vh(Th,P1);
macro grad(u) [dx(u),dy(u)]//



Vh dist;
int nstep=4;
for(int step=0; 1 ; ++step)
{
	dist=0; 
	Vh phi,pphi,fphi;
	phi[] = von1c(0,Vh,tgv=1);
	phi[] = phi[] ? 0: 1;	
	distance(Th,phi,dist[],distmax=epaisMaillage	);
	
	if(step==nstep) break; // sortie .. 
	
	fphi= abs(dist)<epaisMaillage*.9;
	plot(dist,Th, wait=wait);
	
    solve Pbadp (phi,pphi)=int2d(Th)(grad(phi)'*grad(pphi)) - int2d(Th)(fphi*pphi) +on(Lpreform,phi=0);
    real mxphi = phi[].max , mnphi=phi[].min, dlphi= mxphi-mnphi;
    phi[] /= dlphi;
    cout << " dlphi = " << dlphi << endl;
    //  M = 1/e^2 H ==  1/h^2
    //  h = e/ sqrt(H)  
    // dans la dir normal on a H = u'' = 1/ dlphi  => err = 2/e2 
    // nombre de point   
    real  epsth  = hfine/sqrt(dlphi);
    //  1/h^2 = 2/e2/epsth^2  =>  h/e = e*epsth 
    plot(phi,wait=wait,value=1);
    Th= adaptmesh(Th,phi,err=epsth,nbvx=100000,hmax=0.5,hmin=0.005,ratio=1.2);
    
}
plot(Th,wait=wait,ps="Th.eps");
savemesh(Th,"Th.mesh");
}
