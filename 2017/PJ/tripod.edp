load "PETSc"
mesh3 Th("tripod.mesh");
macro dimension()3// EOM
macro def(i)[i, i#y, i#z]// EOM     // vector field definition
macro init(i)[i, i, i]// EOM        // vector field initialization
include "macro_ddm.idp"

func Pk = [P1, P1, P1];
fespace Wh(Th, Pk);                         // local finite element space
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
real[int] D;                                // partition of unity
{
    mesh3 ThBorder, ThGlobal = Th;
    build(Th, ThBorder, ThGlobal, 10, 1, 1, D, arrayIntersection, restrictionIntersection, Wh, Pk, mpiCommWorld, false)
}

macro epsilon(u)[dx(u), dy(u#y), dz(u#z), (dz(u#y) + dy(u#z)) / sqrt(2.0), (dz(u) + dx(u#z)) / sqrt(2.0), (dy(u) + dx(u#y)) / sqrt(2.0)]// EOM
macro div(u)(dx(u) + dy(u#y) + dz(u#z))// EOM

real f = -9000.0;
real strain = 100.0;
real Young = 1.0e8;
real poisson = 0.45;
real tmp = 1.0 + poisson;
real mu = Young  / (2.0 * tmp);
real lambda = Young * poisson / (tmp * (1.0 - 2.0 * poisson));
varf vPb(def(u), def(v)) = intN(Th)(lambda * div(u) * div(v) + 2 * mu * (epsilon(u)' * epsilon(v))) + intN(Th)(f * vy) + int2d(Th, 2)(100.0 * f * vy) + on(1, u = 0.0, uy = 0.0, uz = 0.0) + on(2, u = 0.0, uz = 0.0);
matrix<real> Mat = vPb(Wh, Wh, tgv = -1);
real[int] rhs = vPb(0, Wh, tgv = -1);

dmatrix A(Mat, arrayIntersection, restrictionIntersection, D, bs = 3);

set(A, sparams = "-pc_type lu -pc_factor_mat_solver_package mumps");
real[int] sol(rhs.n);
sol = A^-1 * rhs;
{
    Wh def(z);
    z[] = D;
    mesh3 ThExport = trunc(Th, z > 0.4);
    fespace WhExport(ThExport, [P1, P1, P1]);
    z[] = sol;
    WhExport def(uExport) = def(z);
    int[int] order = [1];
    export("tripod", ThExport, [uExport, uExporty, uExportz], order, mpiCommWorld);
}
