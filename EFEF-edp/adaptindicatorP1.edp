//  Maillage regulier d'un polygone a 6 cote 
real aa = 0.3;
real[int] Gxx=[0.,1.,1.,aa,aa,0.];
real[int] Gyy=[0.,0.,aa,aa,1.,1.];
border Gamma(t=0,Gxx.n) { 
  int i=int(t)%Gxx.n;  real t1=t-int(t), t0=1-t1; 
  x = Gxx[i]*t0 + Gxx[(i+1)%Gxx.n]*t1;
  y = Gyy[i]*t0 + Gyy[(i+1)%Gxx.n]*t1; }
  
mesh Th = buildmesh (Gamma(60));  // a inital mesh 
Th=adaptmesh(Th,aa/2.,IsMetric=1,splitpbedge=1);  // maillage avec un pas constant aa/2.
fespace Vh(Th,P1);
fespace Nh(Th,P0);
Vh u,v;
real error=0.01;
func f=(x-y);
problem Probem1(u,v,solver=CG,eps=1.0e-6) =
    int2d(Th,qforder=2)( u*v*1.0e-10+  dx(u)*dx(v) + dy(u)*dy(v)) 
  + int2d(Th,qforder=2)( -f*v);
  
  
int i;
Nh eta;
varf indicator2(uu,eta) = intalledges(Th)(eta*lenEdge*square(jump(N.x*dx(u)+N.y*dy(u))))
 +int2d(Th)(eta*square(f*hTriangle));
for (i=0;i< 4;i++)
{   
  Probem1; 
   cout << u[].min << " " << u[].max << endl; 
   plot(u,wait=1);
   cout << " indicator2 " << endl;
   
   eta[] = indicator2(0,Nh);
   eta=sqrt(eta);
   cout << eta[].min << " " << eta[].max << endl;
   plot(eta,fill=1,wait=1);
   Th=adaptmesh(Th,u,err=error,anisomax=1,inquire=1);
   plot(Th,wait=1);
   u=u;
   eta=eta;
  error = error/2;
} ;
