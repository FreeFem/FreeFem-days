load "MUMPS_seq" // good sparse linear solver 
// add Non linearity in K and alpha in tP 1
// in test  buggus to day ... 
// K(u), alpha(u)
real L = 3;
int NX = 30;
int NY = 10;
func fgamma0 = sin(2*pi*y)/5; 
int[int] ll1=[1,3,1,0], ll2=[1,2,1,0];
mesh Th1=square(NX,NY,[(x-1)*fgamma0+ x * L , y],label=ll1);
mesh Th2=square(NX,NY+5,[(x-1)*fgamma0 -  x * L, y],label=ll2); 
plot(Th1,Th2, wait=1);
if(0) 
{// check label ... 
    real l01= int1d(Th1,0)(1.);
    real l02= int1d(Th2,0)(1.);
    real l11= int1d(Th1,1)(1.);
    real l12= int1d(Th2,1)(1.);
    real l31= int1d(Th1,3)(1.);
    real l22= int1d(Th2,2)(1.);
    cout << " mean y 0 " << int1d(Th1,0)(y)/l01  << " " 
        << int1d(Th2,0)(y)/l02  << endl;
    cout << " mean x 1 " << int1d(Th1,1)(x)/l11  << " " 
        << int1d(Th2,1)(x)/l12  << endl;
   cout << " mean x 3 2   " << int1d(Th1,3)(x)/l31  << " " 
        << int1d(Th2,2)(x)/l22  << endl;
   assert(l01); 
}
macro grad(u) [dx(u),dy(u)] // 
fespace Vh1(Th1,P1); 
fespace Vh2(Th2,P1); 
Vh1 u1,w1;
Vh2 u2,w2;
func  alpha = 1;
func  dalpha1 = 0.;// alpha(u1,u2) d_u1
func  dalpha2 = 0.;// alpha(u1,u2) d_u2
func f =1 ;
func K1 =1.;
func K2 = 1.;
func dK1 = 0;
func dK2 = 0.;

real U3 = 10; 
real U2 = 1; 
// initial guess with  BC ...
u1 = U3;
u2 = U2; 
// Tangent Problem ... 
varf Pb11(w1,v) = 
  int2d(Th1)( K1*grad(w1)'*grad(v) + dK1*w1*grad(u1)'*grad(v) ) 
     - int2d(Th1)( K1*grad(u1)'*grad(v) - f*v ) 
     + int1d(Th1,0) ( alpha*w1*v +  dalpha1*w1*u1*v )
     + int1d(Th1,0) ( 0.5*alpha*(u1-u2)*v  )
     + int1d(Th2,0) ( 0.5*alpha*(u1-u2)*v  )
     + on(3, w1 = 0);
      
varf Pb22(w2,v) = int2d(Th2)( K2*grad(w2)'*grad(v) + dK2*w2*grad(u2)'*grad(v)) 
     - int2d(Th2)(  K2*grad(u2)'*grad(v) - f*v) 
     + int1d(Th2,0) ( alpha*w2*v+ dalpha2*w2*u2*v) 
     + int1d(Th1,0) ( -0.5*alpha*(u1-u2)*v  )
     + int1d(Th2,0) ( -0.5*alpha*(u1-u2)*v  )
     + on(2, w2 = 0 ); 
  
varf Pb21(w2,v) = int1d(Th2,0)( -0.5* (alpha*w2*v+dalpha2*w2*u2*v) ) 
               +  int1d(Th1,0)( -0.5* (alpha*w2*v+dalpha2*w2*u2*v) )
              ;
varf Pb12(w1,v) = int1d(Th2,0)( -0.5* (alpha*w1*v+dalpha1*w1*u1*v) ) 
               +  int1d(Th1,0)( -0.5* (alpha*w1*v+dalpha1*w1*u1*v) )
;

real err, eps=1e-8; 
for(int iterNewton=0; iterNewton <100; ++ iterNewton)
{
matrix A11 = Pb11(Vh1,Vh1); 
matrix A22 = Pb22(Vh2,Vh2); 

matrix A12 = Pb21(Vh2,Vh1); 
matrix A21 = Pb12(Vh1,Vh2); 

matrix A=[ [A11,A12], [A21, A22]] ;
set(A, solver=sparsesolver); // by deflaut GMRES solver ...
real[int] b1= Pb11(0,Vh1); b1 += Pb21(0,Vh1);

real[int] b2= Pb22(0,Vh2); b2 += Pb12(0,Vh2);

real[int] b = [b1,b2];
real [int] w12= A^-1*b; 
[w1[],w2[]] = w12;
u1[] -= w1[];
u2[] -= w2[]; 
err =  w1[].linfty + w2[].linfty;
cout << " err = "<< err << " " << iterNewton << endl; 
plot( u1,u2, wait=1,cmm=" err= "+err + " iter = " + iterNewton);
if(err < eps) break; 
}
