 // Laplace with RHS sum of Dirac 
 //  f = sum  cdelta_i \delta_i
 real[int] xdelta = [0.25,0.6];//  coord x de delta_i
 real[int] ydelta = [0.25,0.6];//  coord x de delta_j
 real[int] cdelta=[1.,2.];//  coef    delta_i
  mesh Th=square(11,11);
  verbosity=0;
 for(int iter=0;iter < 20;iter++)
 {

 fespace Vh(Th,P1);     // P1 FE space
 
 matrix D = interpolate(Vh,xdelta,ydelta); // the interpolation matrix  
 // at point (xdelta[j],ydelta[i] ) \hfilll
 // so $D_ij = w^i((xdelta[j],ydelta[i]) $ where $w^i$ are the basic function of $V_h$. 
 
 Vh uh,vh;  // unkown and test function. 
 func g=0;                 //  boundary condition function
 Vh b;
 b[]= D*cdelta;
 b[]= -b[];
 problem laplace(uh,vh) =                    //  definion of  the problem 
    int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ) //  bilinear form
  + b[]                         //  linear form of the rhs (so an array)
  + on(1,2,3,4,uh=0) ;          //  boundary condition form

  laplace; // solve the problem plot(uh); // to see the result
  real e1 = 0.5*int2d(Th)( dx(uh)*dx(uh) + dy(uh)*dy(uh) ) ;
  real e2 =
    - cdelta[0]*uh(xdelta[0],ydelta[0])
    - cdelta[1]*uh(xdelta[1],ydelta[1]);
    
  cout << "max uh = " << uh[].max << " nv =  "<< Th.nv <<  " energy= " << e1+e2<< " "<< e1  << endl; 
  plot(uh,wait=1,dim=3,fill=1);
  real eps= 1e-5;
  plot(uh,Th,bb=[[.6-eps,.6-eps],[.6+eps,.6+eps]],wait=1);// zoom 
  Th=adaptmesh(Th,uh,nbvx=100000,err= 0.01*1.2^-iter);
  
  
  }