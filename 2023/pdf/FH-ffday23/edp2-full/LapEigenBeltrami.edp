load "msh3"
load "medit"
include "MeshSurface.idp"
int torus=1;
//  mesh of a tore ...
real R = 3, r=1; 
real h = 0.2; // 
int nx = R*2*pi/h;
int ny = r*2*pi/h;
func torex= (R+r*cos(y*pi*2))*cos(x*pi*2);
func torey= (R+r*cos(y*pi*2))*sin(x*pi*2);
func torez= r*sin(y*pi*2);
meshS Th;
if( torus)
Th=square3(nx,ny,[torex,torey,torez],removeduplicate=true) ;
else
Th = Sphere20(1., 20, 1);
fespace Vh(Th,P1);

macro Grad3(u) [dx(u),dy(u),dz(u)]  // EOM

//with variational form
real sigma = -1;//   
varf aS(u,v) = int2d(Th)(Grad3(u)'*Grad3(v)- sigma* u*v);
varf mS(u,v) = int2d(Th)( u*v);

// tring to defined a continous Normal: (P2 projection of True Normal)
Vh Nx,Ny,Nz; // Normal P1 
{
Vh Mx,My,Mz;
solve Pn([Nx,Ny,Nz],[Mx,My,Mz],solver=CG) = int2d(Th)( [Nx,Ny,Nz]'*[Mx,My,Mz])- int2d(Th)([Ns.x,Ns.y,Ns.z]'*[Mx,My,Mz]); 
}
verbosity=3;
matrix A =aS(Vh,Vh,eps=1e-10,solver="cholmod",sym=1,positive=1);
matrix B =mS(Vh,Vh,solver=CG);
int nev=100;  // number of computed eigen valeu close to sigma

real[int] ev(nev); // to store nev eigein value
Vh[int] eV(nev);   // to store nev eigen vector


int k=EigenValue(A,B,sym=true,sigma=sigma,value=ev,vector=eV); // which="LM" default 
verbosity=0; 
meshS Thm=Th;
fespace Vhm(Thm,P1); 
for (int i=0;i<k;i++) 
{
	cout << i<< " VP: " << ev[i] << endl; 
	real cc = 0; // 1/(eV[i][].linfty*r*5);
        Thm= movemesh(Th,[x+Nx*eV[i]*cc,y+Ny*eV[i]*cc,z+Nz*eV[i]*cc]);	
	Vhm um; um[]=eV[i][]; 
	plot(um,fill=1,cmm="Eigen  Vector "+i+" valeur =" + ev[i]  ,wait=1, nbiso=40);
}