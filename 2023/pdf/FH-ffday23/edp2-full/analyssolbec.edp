load "isoline" load "shell"
include "fit-ipopt.idp"
mesh Thg("bec-f.msh");
real xmin;
fespace Vg(Thg,P2); Vg<complex> ug;
{ ifstream f("bec-f2.rst"); int j;f >>j >> ug[]; }
mesh Th=Thg;//trunc(Thg,1,split=2); 
fespace Vh(Th,P1), Ph(Th,P0); 
int k =2;
Vh u ; u=abs(ug);
real aire = int2d(Th,levelset=1e-3-u)(1.);

Vh u20; 
real umax =u[].max;
plot(u, wait=0);
Ph r;
int[int] lm=findalllocalmin(Th,u[],r[]);
plot(r,wait=0,fill=1,cmm="local catchment region");
real[int,int] data7(7,lm.n);
if(stat("1data7.txt")<0 ) // file not exit
{
int kh=0;

for(int i=0; i< lm.n; ++i)
{
real r0=107; //r(0,0); 
mesh Tho= trunc(Th,abs(r-i)< 0.5);
fespace Vo(Tho,P1);
Vo uo=u; 
real uomin = uo[].min, uomax = uo[].max;

if( uomin < 0.3*uomax && uomax >  umax*0.1 && Tho.area < 3*aire/lm.n &&  Tho.area > 0.1*aire/lm.n  )
{
	data7(6,i)=1;
}
else
   data7(6,i)=0;
}
Ph pok=data7(6,real(r));
//plot(pok,fill=1,wait=0);
Vh pr = sqrt(x*x+y*y);
real R = pr[].max; 
mesh Th1d=square(1000,1,[x*R,y]);

fespace V1d(Th1d,P1,periodic=[[1,x],[3,x]]);
Vh u1; 

{
  mesh The = trunc(Thg,abs(pok-1)>0.5); 
  savemesh(The,"oo/The.msh");
  {  ofstream f("oo/u2P1.txt");
    f << u[]; 
  }
   Vh u2=u*u; 
	varf vM1d(u,v) = int1d(Th1d,1)((dx(u)*dx(v))*1e-3)+ int2d(The,mapu=[sqrt(x*x+y*y),0],mapt	=[sqrt(x*x+y*y),0])(u*v);
	matrix M=vM1d(V1d,V1d,solver=UMFPACK);
	varf vb1d(uuuu,v) = int2d(The,mapt=[sqrt(x*x+y*y),0])(u*v);
	real[int] b1d=vb1d(0,V1d); 
    V1d u1dt;
	u1dt[]=M^-1*b1d;
    u20 = u1dt(sqrt(x*x+y*y),0);
	plot(u20,u,wait=0,dim=3); 
	u1 = min(u / max(u20,1e-3),1.0001);
	plot(u1,fill=1, wait=0);
}

for(int i=0,ii=0; i< lm.n; ++i)
{
real r0=107; //r(0,0); 
mesh Tho= trunc(Th,r==i);


fespace Vo(Tho,P1);
Vo uo=u, u2o=u1*u1; 

real uomin = uo[].min, uomax = uo[].max;

if (data7(6,i)==1)
{
	//plot(uo,dim=3);
    bool ret;
	real[int] data(1);
	int wplot = ii++<4;// 
//	cout << "wplot = " << wplot << " " << i << endl; 
	BestFit1(1,Vo,u2o[],u20,wplot,data,ret);
	data7(:,kh++)=data;
}

}
data7.resize(7,kh);
{ ofstream f("oo/data7.txt"); 
f << data7; 
}
}
else
{
	ifstream f("oo/data7.txt"); 
	int n,m;
	f >> n >>m; 
	f.seekg(0);// rewind f ..
	data7.resize(n,m);
	f >>data7; 	
}
mesh Thc=triangulate(data7(0,:),data7(1,:));
plot(u,Thc,wait=1);

fespace Eh(Thc,P0edge);

varf vedge(u,v) = intalledges(Thc,qforder=1)((nTonEdge==2)*v/nTonEdge);
real[int] eih=vedge(0,Eh);
int ei=0; 
for(int e=0; e < eih.n; ++e)
  if(eih[e])  eih[ei++]=eih[e];
eih.resize(ei); 
real moy =  eih.sum/ eih.n ;
real[int] dd = eih;dd-= moy;
real variance = dd.l2 /  dd.n;
cout << " moy eih =" << moy<< " standart deviation " << sqrt(variance) <<endl;
for(int i=1 ; i<10; ++i)
cout <<" quantile "<<i/10.<< " = " << eih.quantile(i/10.) <<endl; 

